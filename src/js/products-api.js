import axios from 'axios';

const BASE_URL = 'https://books-backend.p.goit.global/books';
const apiClient = axios.create({ baseURL: BASE_URL });

/**
 * Universal helper to make API requests.
 * Handles basic error logging and response extraction.
 * @param {string} url - The endpoint URL relative to BASE_URL.
 * @returns {Promise<Object|Array>} - Data returned from the API.
 */
async function fetchURL(url = '') {
  try {
    const { data } = await apiClient.get(url);
    return data;
  } catch (error) {
    console.error(`‚ùå Error fetching data from ${url}:`, error.message);
    throw new Error('Failed to fetch data from the Books API');
  }
}

/**
 * üîπ –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–µ—Ä–µ–ª—ñ–∫ —É—Å—ñ—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –∫–Ω–∏–≥
 * @returns {Promise<Array<string>>} –ú–∞—Å–∏–≤ –Ω–∞–∑–≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
 * Endpoint: /category-list
 */
export async function getCategoryList() {
  const list = await fetchURL('/category-list');
  return list.map(item => item.list_name);
}

/**
 * üîπ –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ñ –∫–Ω–∏–≥–∏ (—Ç–æ–ø–æ–≤—ñ –∑ —É—Å—ñ—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π)
 * @returns {Promise<Array<Object>>} –ú–∞—Å–∏–≤ –æ–±‚Äô—î–∫—Ç—ñ–≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π —ñ–∑ –º–∞—Å–∏–≤–∞–º–∏ –∫–Ω–∏–≥
 * Endpoint: /top-books
 */
export async function getTopBooks() {
  const response = await fetchURL('/top-books');
  // –£—Å—É–≤–∞—î–º–æ –¥—É–±–ª—ñ–∫–∞—Ç–∏ –∫–Ω–∏–≥ —ñ–∑ –æ–¥–Ω–∞–∫–æ–≤–∏–º–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º–∏
  return response.map(category => ({
    ...category,
    books: filterUniqueBooksByImage(category.books),
  }));
}

/**
 * üîπ –û—Ç—Ä–∏–º–∞—Ç–∏ –∫–Ω–∏–≥–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
 * @param {string} category - –ù–∞–∑–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
 * @returns {Promise<Array<Object>>} –ú–∞—Å–∏–≤ –∫–Ω–∏–≥ —Ü—ñ—î—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
 * Endpoint: /category?category=selectedCategory
 */
export async function getBooksByCategory(category) {
  if (!category || typeof category !== 'string') {
    throw new Error('Valid category name must be provided.');
  }
  const response = await fetchURL(`/category?category=${encodeURIComponent(category)}`);
  return filterUniqueBooksByImage(response);
}

/**
 * üîπ –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–Ω–∏–≥—É –∑–∞ ID
 * @param {string} id - –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∫–Ω–∏–≥–∏
 * @returns {Promise<Object>} –û–±‚Äô—î–∫—Ç —ñ–∑ –¥–µ—Ç–∞–ª—å–Ω–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –∫–Ω–∏–≥—É
 * Endpoint: /bookId
 */
export async function getBookByID(id) {
  if (!id || typeof id !== 'string') {
    throw new Error('Valid book ID must be provided.');
  }
  return await fetchURL(`/${id}`);
}

/**
 * üî∏ –£—Ç–∏–ª—ñ—Ç–∞ –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ –∫–Ω–∏–≥ –∑–∞ book_image
 * @param {Array<Object>} books - –ú–∞—Å–∏–≤ –∫–Ω–∏–≥
 * @returns {Array<Object>} –ú–∞—Å–∏–≤ –±–µ–∑ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤
 */
function filterUniqueBooksByImage(books) {
  const seen = new Set();
  return books.filter(book => {
    if (!book.book_image) return false;
    if (seen.has(book.book_image)) return false;
    seen.add(book.book_image);
    return true;
  });
}
